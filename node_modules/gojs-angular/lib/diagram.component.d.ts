import { ElementRef, EventEmitter, IterableDiffers, KeyValueDiffers, NgZone } from '@angular/core';
import * as go from 'gojs';
import * as ɵngcc0 from '@angular/core';
export declare class DiagramComponent {
    private _differs;
    private _kvdiffers;
    zone: NgZone;
    /**
     * Diagram initialization function. Returns a go.Diagram.
     * Do not initialize model data in this function.
     */
    initDiagram: () => go.Diagram;
    nodeDataArray: Array<go.ObjectData>;
    linkDataArray: Array<go.ObjectData>;
    modelData: go.ObjectData;
    divClassName: string;
    modelChangedListener: (e: go.ChangedEvent) => void | null;
    modelChange: EventEmitter<go.IncrementalData>;
    diagramDiv: ElementRef;
    diagram: go.Diagram;
    private _ndaDiffer;
    private _ldaDiffer;
    private _mdDiffer;
    constructor(_differs: IterableDiffers, _kvdiffers: KeyValueDiffers, zone: NgZone);
    ngOnInit(): void;
    /**
     * Initializes diagram / model after view init
     */
    ngAfterViewInit(): void;
    /**
     * Always be checking if array Input data has changed (node and link data arrays)
     */
    ngDoCheck(): void;
    /**
     * Some input property has changed (or its contents changed) in parent component.
     * Update diagram data accordingly
     */
    updateFromAppData(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DiagramComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DiagramComponent, "gojs-diagram", never, {
    "linkDataArray": "linkDataArray";
    "modelData": "modelData";
    "modelChangedListener": "modelChangedListener";
    "initDiagram": "initDiagram";
    "nodeDataArray": "nodeDataArray";
    "divClassName": "divClassName";
}, {
    "modelChange": "modelChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZGlhZ3JhbS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEl0ZXJhYmxlRGlmZmVycywgS2V5VmFsdWVEaWZmZXJzLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgZ28gZnJvbSAnZ29qcyc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERpYWdyYW1Db21wb25lbnQge1xyXG4gICAgcHJpdmF0ZSBfZGlmZmVycztcclxuICAgIHByaXZhdGUgX2t2ZGlmZmVycztcclxuICAgIHpvbmU6IE5nWm9uZTtcclxuICAgIC8qKlxyXG4gICAgICogRGlhZ3JhbSBpbml0aWFsaXphdGlvbiBmdW5jdGlvbi4gUmV0dXJucyBhIGdvLkRpYWdyYW0uXHJcbiAgICAgKiBEbyBub3QgaW5pdGlhbGl6ZSBtb2RlbCBkYXRhIGluIHRoaXMgZnVuY3Rpb24uXHJcbiAgICAgKi9cclxuICAgIGluaXREaWFncmFtOiAoKSA9PiBnby5EaWFncmFtO1xyXG4gICAgbm9kZURhdGFBcnJheTogQXJyYXk8Z28uT2JqZWN0RGF0YT47XHJcbiAgICBsaW5rRGF0YUFycmF5OiBBcnJheTxnby5PYmplY3REYXRhPjtcclxuICAgIG1vZGVsRGF0YTogZ28uT2JqZWN0RGF0YTtcclxuICAgIGRpdkNsYXNzTmFtZTogc3RyaW5nO1xyXG4gICAgbW9kZWxDaGFuZ2VkTGlzdGVuZXI6IChlOiBnby5DaGFuZ2VkRXZlbnQpID0+IHZvaWQgfCBudWxsO1xyXG4gICAgbW9kZWxDaGFuZ2U6IEV2ZW50RW1pdHRlcjxnby5JbmNyZW1lbnRhbERhdGE+O1xyXG4gICAgZGlhZ3JhbURpdjogRWxlbWVudFJlZjtcclxuICAgIGRpYWdyYW06IGdvLkRpYWdyYW07XHJcbiAgICBwcml2YXRlIF9uZGFEaWZmZXI7XHJcbiAgICBwcml2YXRlIF9sZGFEaWZmZXI7XHJcbiAgICBwcml2YXRlIF9tZERpZmZlcjtcclxuICAgIGNvbnN0cnVjdG9yKF9kaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsIF9rdmRpZmZlcnM6IEtleVZhbHVlRGlmZmVycywgem9uZTogTmdab25lKTtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemVzIGRpYWdyYW0gLyBtb2RlbCBhZnRlciB2aWV3IGluaXRcclxuICAgICAqL1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEFsd2F5cyBiZSBjaGVja2luZyBpZiBhcnJheSBJbnB1dCBkYXRhIGhhcyBjaGFuZ2VkIChub2RlIGFuZCBsaW5rIGRhdGEgYXJyYXlzKVxyXG4gICAgICovXHJcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogU29tZSBpbnB1dCBwcm9wZXJ0eSBoYXMgY2hhbmdlZCAob3IgaXRzIGNvbnRlbnRzIGNoYW5nZWQpIGluIHBhcmVudCBjb21wb25lbnQuXHJcbiAgICAgKiBVcGRhdGUgZGlhZ3JhbSBkYXRhIGFjY29yZGluZ2x5XHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZUZyb21BcHBEYXRhKCk6IHZvaWQ7XHJcbn1cclxuIl19