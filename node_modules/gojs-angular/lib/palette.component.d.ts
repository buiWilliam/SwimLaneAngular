import { ElementRef, EventEmitter, IterableDiffers, KeyValueDiffers, NgZone } from '@angular/core';
import * as go from 'gojs';
import * as ɵngcc0 from '@angular/core';
export declare class PaletteComponent {
    private _differs;
    private _kvdiffers;
    zone: NgZone;
    /**
     * Palette initialization function. Returns a go.Palette.
     * Do not initialize model data in this function.
     */
    initPalette: () => go.Palette;
    nodeDataArray: Array<go.ObjectData>;
    linkDataArray: Array<go.ObjectData>;
    modelData: go.ObjectData;
    divClassName: string;
    modelChangedListener: (e: go.ChangedEvent) => void | null;
    modelChange: EventEmitter<go.IncrementalData>;
    paletteDiv: ElementRef;
    palette: go.Palette | null;
    _ndaDiffer: any;
    _ldaDiffer: any;
    private _mdDiffer;
    constructor(_differs: IterableDiffers, _kvdiffers: KeyValueDiffers, zone: NgZone);
    ngOnInit(): void;
    /**
     * Initialize Palette after view init
     */
    ngAfterViewInit(): void;
    /**
     * Always be checking if array Input data has changed (node and link data arrays)
     */
    ngDoCheck(): void;
    /**
     * Some input property has changed (or its contents changed) in parent component.
     * Update palette data accordingly
     */
    updateFromAppData(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PaletteComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PaletteComponent, "gojs-palette", never, {
    "linkDataArray": "linkDataArray";
    "modelData": "modelData";
    "modelChangedListener": "modelChangedListener";
    "initPalette": "initPalette";
    "nodeDataArray": "nodeDataArray";
    "divClassName": "divClassName";
}, {
    "modelChange": "modelChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFsZXR0ZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicGFsZXR0ZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEl0ZXJhYmxlRGlmZmVycywgS2V5VmFsdWVEaWZmZXJzLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgZ28gZnJvbSAnZ29qcyc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBhbGV0dGVDb21wb25lbnQge1xyXG4gICAgcHJpdmF0ZSBfZGlmZmVycztcclxuICAgIHByaXZhdGUgX2t2ZGlmZmVycztcclxuICAgIHpvbmU6IE5nWm9uZTtcclxuICAgIC8qKlxyXG4gICAgICogUGFsZXR0ZSBpbml0aWFsaXphdGlvbiBmdW5jdGlvbi4gUmV0dXJucyBhIGdvLlBhbGV0dGUuXHJcbiAgICAgKiBEbyBub3QgaW5pdGlhbGl6ZSBtb2RlbCBkYXRhIGluIHRoaXMgZnVuY3Rpb24uXHJcbiAgICAgKi9cclxuICAgIGluaXRQYWxldHRlOiAoKSA9PiBnby5QYWxldHRlO1xyXG4gICAgbm9kZURhdGFBcnJheTogQXJyYXk8Z28uT2JqZWN0RGF0YT47XHJcbiAgICBsaW5rRGF0YUFycmF5OiBBcnJheTxnby5PYmplY3REYXRhPjtcclxuICAgIG1vZGVsRGF0YTogZ28uT2JqZWN0RGF0YTtcclxuICAgIGRpdkNsYXNzTmFtZTogc3RyaW5nO1xyXG4gICAgbW9kZWxDaGFuZ2VkTGlzdGVuZXI6IChlOiBnby5DaGFuZ2VkRXZlbnQpID0+IHZvaWQgfCBudWxsO1xyXG4gICAgbW9kZWxDaGFuZ2U6IEV2ZW50RW1pdHRlcjxnby5JbmNyZW1lbnRhbERhdGE+O1xyXG4gICAgcGFsZXR0ZURpdjogRWxlbWVudFJlZjtcclxuICAgIHBhbGV0dGU6IGdvLlBhbGV0dGUgfCBudWxsO1xyXG4gICAgX25kYURpZmZlcjogYW55O1xyXG4gICAgX2xkYURpZmZlcjogYW55O1xyXG4gICAgcHJpdmF0ZSBfbWREaWZmZXI7XHJcbiAgICBjb25zdHJ1Y3RvcihfZGlmZmVyczogSXRlcmFibGVEaWZmZXJzLCBfa3ZkaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnMsIHpvbmU6IE5nWm9uZSk7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplIFBhbGV0dGUgYWZ0ZXIgdmlldyBpbml0XHJcbiAgICAgKi9cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbHdheXMgYmUgY2hlY2tpbmcgaWYgYXJyYXkgSW5wdXQgZGF0YSBoYXMgY2hhbmdlZCAobm9kZSBhbmQgbGluayBkYXRhIGFycmF5cylcclxuICAgICAqL1xyXG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFNvbWUgaW5wdXQgcHJvcGVydHkgaGFzIGNoYW5nZWQgKG9yIGl0cyBjb250ZW50cyBjaGFuZ2VkKSBpbiBwYXJlbnQgY29tcG9uZW50LlxyXG4gICAgICogVXBkYXRlIHBhbGV0dGUgZGF0YSBhY2NvcmRpbmdseVxyXG4gICAgICovXHJcbiAgICB1cGRhdGVGcm9tQXBwRGF0YSgpOiB2b2lkO1xyXG59XHJcbiJdfQ==